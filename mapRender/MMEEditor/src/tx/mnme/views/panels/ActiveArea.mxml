<?xml version="1.0" encoding="utf-8"?>
<panels:BasePanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:views="tx.mnme.views.*" 
				 width="400" height="100" 
				 resize="onResizeHandler(event)"
				 initialize="initUI(event)" xmlns:panels="tx.mnme.views.panels.*">
	<fx:Script>
		<![CDATA[
			import com.tencent.morefun.naruto.tools.mmefile.timeline.BaseElementData;
			import com.tencent.morefun.naruto.tools.mmefile.timeline.ElementData;
			import com.tencent.morefun.naruto.tools.mmefile.timeline.FrameData;
			import com.tencent.morefun.naruto.tools.mmefile.timeline.LayerData;
			import com.tencent.morefun.naruto.tools.mmefile.timeline.MmeElementData;
			import com.tencent.morefun.naruto.tools.mmefile.timeline.PointElementData;
			import tx.mnme.commands.cmd_internal;
			import tx.mnme.commands.area.ChangeAttributeCommand;
			import tx.mnme.commands.area.DeleteCommand;
			import tx.mnme.commands.area.SelectItemCommand;
			import tx.mnme.events.ActiveAreaEvent;
			import tx.mnme.events.AttributeEvent;
			import tx.mnme.utils.EqualUtil;
			import tx.mnme.views.panels.activearea.BaseItem;
			import tx.mnme.views.panels.activearea.ImageItem;
			import tx.mnme.views.panels.activearea.MmeRenderItem;
			import tx.mnme.views.panels.activearea.PointItem;
			
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			public var dirty:Boolean = false;
			
			public function destroy():void
			{
				stage.removeEventListener(MouseEvent.MOUSE_UP,onUI);
				removeEventListener(Event.ENTER_FRAME,onUI);
				Mouse.cursor = MouseCursor.AUTO;
				Mouse.hide();
				Mouse.show();
				
				removeEventListener(Event.ENTER_FRAME,updateResize)
				
				removeItems();
				
				dragPoint = null;
				selectedItem = null;
			}
			
			protected function initUI(event:FlexEvent):void
			{
				var hv:int = 1000;
				
				ui.graphics.beginFill(0x0,0);
				ui.graphics.drawRect(0,0,hv*2,hv*2);
				
				uiframe.graphics.lineStyle(1,0xFFFFFF);
				uiframe.graphics.moveTo(0,hv);
				uiframe.graphics.lineTo(hv*2,hv);
				uiframe.graphics.moveTo(hv,0);
				uiframe.graphics.lineTo(hv,hv*2);
				
				ui.graphics.endFill();
				
			}
			
			private var dragOldData:BaseElementData;
			private var dragPoint:Point = new Point();
			private var selectedItem:BaseItem;
			private var cf:int;
			
			public function getSelectedItem():BaseItem
			{
				return selectedItem;
			}
			
			private function onUI(e:Event):void
			{
				if(Mouse.cursor == MouseCursor.HAND)
				{
					onUIMoveStage(e);
					return;
				}
				switch(e.type)
				{
					case MouseEvent.MOUSE_DOWN:
						var i:int = ui.numChildren;
						while(i--)
						{
							var item:BaseItem = ui.getChildAt(i) as BaseItem;
							if(item && item.name.indexOf("item")==0 && item.hitTestPoint(stage.mouseX,stage.mouseY,true))
							{
								var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.CAN_SELECT_ELEMENT,item);
								dispatchEvent(ae);
								if(ae.canSelectElement)
								{
									dragPoint.x = int(ui.mouseX - item.x);
									dragPoint.y = int(ui.mouseY - item.y);
									
									dragOldData = item.getData().clone();
									
									if(selectedItem != item)
									{
										var sicmd:SelectItemCommand = new SelectItemCommand(this,item.layerIndex,selectedItem?selectedItem.layerIndex:-1);
										sicmd.doCommand();
									}
									stage.addEventListener(MouseEvent.MOUSE_UP,onUI);
									addEventListener(Event.ENTER_FRAME,onUI);
									return;
								}
							}
						}
						
						if(selectedItem)
						{
							sicmd = new SelectItemCommand(this,-1,selectedItem.layerIndex);
							sicmd.doCommand();
						}
						
						break;
					case MouseEvent.MOUSE_UP:
						stage.removeEventListener(MouseEvent.MOUSE_UP,onUI);
						removeEventListener(Event.ENTER_FRAME,onUI);
						
						var data:BaseElementData = selectedItem.getData().clone();
						
						if(data.x != dragOldData.x || data.y != dragOldData.y)
						{
							doChangeSelectedItemAttribute(selectedItem.layerIndex,dragOldData,data);
						}
						dragOldData = null;
						
						break;
					case Event.ENTER_FRAME:
//						selectedItem.x = int(ui.mouseX - dragPoint.x);
//						selectedItem.y = int(ui.mouseY - dragPoint.y);
						
						selectedItem.setPosition(ui.mouseX - dragPoint.x - 1000,ui.mouseY - dragPoint.y - 1000,true)
						
						dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.UPDATE_ATTRIBUTE,selectedItem));
						break;
				}
			}
			
			private function onUIMoveStage(e:Event):void
			{
				switch(e.type)
				{
					case MouseEvent.MOUSE_DOWN:
						dragPoint.x = int(stage.mouseX + scroller.horizontalScrollBar.value - scroller.horizontalScrollBar.maximum);
						dragPoint.y = int(stage.mouseY + scroller.verticalScrollBar.value - scroller.verticalScrollBar.maximum);
						
						stage.addEventListener(MouseEvent.MOUSE_UP,onUIMoveStage);
						addEventListener(Event.ENTER_FRAME,onUIMoveStage);
						break;
					case MouseEvent.MOUSE_UP:
						stage.removeEventListener(MouseEvent.MOUSE_UP,onUIMoveStage);
						removeEventListener(Event.ENTER_FRAME,onUIMoveStage);
						
						Mouse.cursor = MouseCursor.AUTO;
						Mouse.hide();
						Mouse.show();
						break;
					case Event.ENTER_FRAME:
						scroller.horizontalScrollBar.value = scroller.horizontalScrollBar.maximum - stage.mouseX + dragPoint.x;
						scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum - stage.mouseY + dragPoint.y;
						
						Mouse.cursor = MouseCursor.HAND;
						Mouse.hide();
						Mouse.show();
						break;
				}
			}
			
			protected function onResizeHandler(event:ResizeEvent):void
			{
				addEventListener(Event.ENTER_FRAME,updateResize)
			}
			
			private function updateResize(e:Event):void
			{
				removeEventListener(Event.ENTER_FRAME,updateResize)
				scroller.horizontalScrollBar.value = scroller.horizontalScrollBar.maximum/2;
				scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum/2;
			}
			
			private function addItem(item:BaseItem,initDisplay:Boolean=true,selected:Boolean=false):void
			{
				ui.addChild(item);
				if(initDisplay)
				{
					item.initDisplay();
				}
				if(selected)
				{
					var sicmd:SelectItemCommand = new SelectItemCommand(this,item.layerIndex,selectedItem?selectedItem.layerIndex:-1);
					sicmd.doCommand();
				}
			}
			
			public function addItemAt(item:BaseItem,initDisplay:Boolean=true,selected:Boolean=false,layerIndex:int=0):void
			{
				item.name = "item"+layerIndex;
				for(var i:int=ui.numChildren-1;i>=0;i--)
				{
					var bi:BaseItem = ui.getChildByName("item"+i) as BaseItem;
					if(bi && bi.layerIndex <= layerIndex )
					{
						addItem(item,initDisplay,selected);
						ui.addChildAt(item,i);
						return;
					}
				}
				addItem(item,initDisplay,selected);
			}
			
			public function removeItemAt(layerIndex:int):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				if(item)
				{
					if(item.selected)
					{
						unselectItem(item);
					}
					
					item.destroy();
				}
			}
			
//			public function selectItemByTimeline(cf:int,cli:int,fd:FrameData):void
//			{
//				for(var i:int=layerDatas.length-1;i>=0;i--)
//				{
//					for each(var fd:FrameData in layerDatas[i].frameDatas)
//					{
//						
//					}
//				}
//			}
			
			public function selectContent(layerIndex:int):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				if(item)
				{
					selectItem(item);
				}
			}
			
			public function changeSelectedItemAttribute(e:AttributeEvent):void
			{
				if(selectedItem)
				{
					doChangeSelectedItemAttribute(selectedItem.layerIndex,e.oldData,e.data);
				}
			}
			
			private function doChangeSelectedItemAttribute(layerIndex:int,oldData:BaseElementData,newData:BaseElementData):void
			{
				new ChangeAttributeCommand(this,layerIndex,oldData,newData).doCommand();
			}
			
			cmd_internal function doChangeSelectedItemAttribute(layerIndex:int,data:BaseElementData):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				if(item)
				{
					item.setPosition(data.x,data.y,true);
					if(data is ElementData)
					{
						ImageItem(item).setScale(ElementData(data).scaleX,ElementData(data).scaleY,true);
						ImageItem(item).setRotation(ElementData(data).rotation,true);
						ImageItem(item).setAlpha(ElementData(data).alpha,true);
						ImageItem(item).setBlendMode(ElementData(data).blendMode,true);
						ImageItem(item).setColor(ElementData(data).color,true);
					}else if(data is MmeElementData)
					{
						MmeRenderItem(item).setUrl(MmeElementData(data).url,true);
						MmeRenderItem(item).setAction(MmeElementData(data).action,true);
					}else if(data is PointElementData)
					{
						PointElementData(item.getData()).name = PointElementData(data).name;
					}
				}
				dirty = true;
			}
			
			cmd_internal function undoChangeSelectedItemAttribute(layerIndex:int,oldData:BaseElementData):void
			{
				cmd_internal::doChangeSelectedItemAttribute(layerIndex,oldData);
				
				if(selectedItem && selectedItem.layerIndex == layerIndex)
				{
					selectItemByLayerIndex(layerIndex);
				}
				
				this.dirty = true;
			}
			
			public function selectItemByLayerIndex(layerIndex:int):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				if(item)
				{
					selectItem(item);
				}else
				{
					unselectItem(selectedItem);
				}
			}
			public function unselectItemByLayerIndex(layerIndex:int):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				if(item)
				{
					unselectItem(item);
				}
			}
			
			public function selectItem(item:BaseItem):void
			{
				if(selectedItem)
				{
					unselectItem(selectedItem);
				}
				item.selected = true;
				selectedItem = item;
				
				var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.SELECT,item);
				dispatchEvent(ae);
			}
			
			public function unselectItem(item:BaseItem):void
			{
				if(item)
				{
					item.selected = false;
				}
				selectedItem = null;
				
				var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.UNSELECT,item);
				dispatchEvent(ae);
			}
			
			private function removeItems():void
			{
//				var removedItems:Vector.<BaseItem> = new Vector.<BaseItem>;
				while(ui.numChildren>0)
				{
					(ui.removeChildAt(0) as BaseItem).destroy();
					//removedItems.push(ui.removeChildAt(0) as ImageItem);
				}
			}
			
			public function createItem(data:BaseElementData,layerIndex:int,preName:String="item"):BaseItem
			{
				var item:BaseItem;
				if(data is MmeElementData)
				{
					item = new MmeRenderItem(layerIndex,data as MmeElementData);
					
					item.name = preName+layerIndex;
					item.setPosition(data.x,data.y);
					MmeRenderItem(item).setFrame(cf);
				}else if(data is ElementData)
				{
					item = new ImageItem(layerIndex,null,data as ElementData);
					var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.GET_LIBRARY_FILE,item);
					dispatchEvent(ae);
					
					item.name = preName+layerIndex;
					item.setPosition(data.x,data.y);
					ImageItem(item).setScale(ElementData(data).scaleX,ElementData(data).scaleY);
					ImageItem(item).setRotation(ElementData(data).rotation);
					ImageItem(item).setAlpha(ElementData(data).alpha);
					ImageItem(item).blendMode = ElementData(data).blendMode||"normal";
					ImageItem(item).setColor(ElementData(data).color);
				}else if(data is PointElementData)
				{
					item = new PointItem(data as PointElementData,layerIndex);
					item.name = preName+layerIndex;
					item.setPosition(data.x,data.y);
				}
				return item;
			}
			
			public function rerefItem(cf:int,layerDatas:Vector.<LayerData>,multiFrame:Boolean):void
			{
				selectedItem = null;
				this.cf = cf;
				
				removeItems();
				
				for(var i:int=layerDatas.length-1;i>=0;i--)
				{
					if(!layerDatas[i].visible)
					{
						continue;
					}
					for(var j:int=0;j<layerDatas[i].frameDatas.length;j++)
					{
						var fd:FrameData = layerDatas[i].frameDatas[j];
						var item:BaseItem;
						//前帧
						if(multiFrame && cf-1 >= fd.index && cf-1 < fd.index + fd.length && fd.element && layerDatas[i].lock == false)
						{
							if(cf-1 != fd.index && fd.useTween)
							{
								fd = getTweenFrameData(cf-1,fd,layerDatas[i].frameDatas)||fd;
							}
							item = createItem(fd.element,i,"prevItem");
							if(item is MmeRenderItem)
							{
								MmeRenderItem(item).setFrame(cf);
							}
							addItem(item);
							item.alpha = 0.5;
						}
						
						fd = layerDatas[i].frameDatas[j];
						//当前帧
						if(cf >= fd.index && cf < fd.index + fd.length && fd.element)
						{
							if(cf != fd.index && fd.useTween)
							{
								fd = getTweenFrameData(cf,fd,layerDatas[i].frameDatas)||fd;
							}
							item = createItem(fd.element,i);
							if(item is MmeRenderItem)
							{
								MmeRenderItem(item).setFrame(cf);
							}
							addItem(item);
						}
						
						
						fd = layerDatas[i].frameDatas[j];
						//后帧
						if(multiFrame && cf+1 >= fd.index && cf+1 < fd.index + fd.length && fd.element && layerDatas[i].lock == false)
						{
							if(cf+1 != fd.index && fd.useTween)
							{
								fd = getTweenFrameData(cf+1,fd,layerDatas[i].frameDatas)||fd;
							}
							item = createItem(fd.element,i,"nextItem");
							if(item is MmeRenderItem)
							{
								MmeRenderItem(item).setFrame(cf);
							}
							addItem(item);
							item.alpha = 0.5;
						}
						
					}
//					for each(var fd:FrameData in layerDatas[i].frameDatas)
//					{
//						if(cf >= fd.index && cf < fd.index + fd.length && fd.element)
//						{
//							if(cf != fd.index && fd.useTween)
//							{
//								fd = getTweenFrameData(cf,fd,layerDatas[i].frameDatas)||fd;
//							}
//							var item:BaseItem = createItem(fd.element,i);
//							if(item is MmeRenderItem)
//							{
//								MmeRenderItem(item).setFrame(cf);
//							}
//							addItem(item);
//						}
//					}
				}
			}
			
			private function getTweenFrameData(cf:int,fd:FrameData,fds:Vector.<FrameData>):FrameData
			{
				var nfd:FrameData = fd.clone();
				var tfd:FrameData;
				for each(var fdtmp:FrameData in fds)
				{
					if(fdtmp != fd && fdtmp.index == fd.index + fd.length && EqualUtil.equalElement(fdtmp.element,fd.element))
					{
						tfd = fdtmp;
						break;
					}
				}
				if(tfd)
				{
					var r:Number = (cf - fd.index)/(tfd.index - fd.index);
					
					nfd.element.x = r * (tfd.element.x - fd.element.x) + fd.element.x;
					nfd.element.y = r * (tfd.element.y - fd.element.y) + fd.element.y;
					
					if(tfd.element is ElementData)
					{
						var nfde:ElementData = nfd.element as ElementData;
						var tfde:ElementData = tfd.element as ElementData;
						var fde:ElementData = fd.element as ElementData;
						nfde.scaleX = r * (tfde.scaleX - nfde.scaleX) + nfde.scaleX;
						nfde.scaleY = r * (tfde.scaleY - nfde.scaleY) + nfde.scaleY;
						nfde.rotation = r * (tfde.rotation - nfde.rotation) + nfde.rotation;
						nfde.alpha = r * (tfde.alpha - nfde.alpha) + nfde.alpha;
					}
					
				}else
				{
					return null;
				}
				return nfd;
			}
			
			override public function onKeyDown(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.SPACE)
				{
					if(hasEventListener(Event.ENTER_FRAME))
					{
						return;
					}
					Mouse.cursor = MouseCursor.HAND;
					Mouse.hide();
					Mouse.show();
					return;
				}
				var ae:ActiveAreaEvent;
				
				if(event.keyCode == Keyboard.P)
				{
					ae = new ActiveAreaEvent(ActiveAreaEvent.ADD_POINT_ITEM,null);
					dispatchEvent(ae);
					return;
				}
				
				
				if(selectedItem==null)
				{
					return;
				}
				switch(event.keyCode)
				{
					case Keyboard.DELETE:
						doDelete();
						break;
					case Keyboard.LEFT:
						selectedItem.x -= event.shiftKey?10:1;
						selectedItem.setPosition(selectedItem.x-1000,selectedItem.y-1000,true);
						dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.UPDATE_ATTRIBUTE,selectedItem));
						break;
					case Keyboard.RIGHT:
						selectedItem.x += event.shiftKey?10:1;
						selectedItem.setPosition(selectedItem.x-1000,selectedItem.y-1000,true);
						dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.UPDATE_ATTRIBUTE,selectedItem));
						break;
					case Keyboard.UP:
						selectedItem.y -= event.shiftKey?10:1;
						selectedItem.setPosition(selectedItem.x-1000,selectedItem.y-1000,true);
						dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.UPDATE_ATTRIBUTE,selectedItem));
						break;
					case Keyboard.DOWN:
						selectedItem.y += event.shiftKey?10:1;
						selectedItem.setPosition(selectedItem.x-1000,selectedItem.y-1000,true);
						dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.UPDATE_ATTRIBUTE,selectedItem));
						break;
					default:
						return;
				}
				
			}
			override public function onKeyUp(event:KeyboardEvent):void
			{
				switch(event.keyCode)
				{
					case Keyboard.SPACE:
						Mouse.cursor = MouseCursor.AUTO;
						Mouse.hide();
						Mouse.show();
						break;
				}
			}
			
			
			private function doDelete():void
			{
				if(selectedItem==null)
				{
					return;
				}
				
				new DeleteCommand(this,selectedItem.layerIndex,selectedItem.getData()).doCommand();
			}
			
			cmd_internal function doDelete(layerIndex:int):void
			{
				var item:BaseItem = ui.getChildByName("item"+layerIndex) as BaseItem;
				removeItemAt(layerIndex);
				
				var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.DELETE,item);
				dispatchEvent(ae);
				
				this.dirty = true;
			}
			
			cmd_internal function undoDelete(data:BaseElementData,layerIndex:int):void
			{
				var item:BaseItem = createItem(data,layerIndex);
				addItemAt(item,true,true,layerIndex);
				
				var ae:ActiveAreaEvent = new ActiveAreaEvent(ActiveAreaEvent.UN_DELETE,item);
				dispatchEvent(ae);
				
				this.dirty = true;
			}
			
			protected function colorpicker1_changeHandler(event:ColorPickerEvent):void
			{
				setBackgroundColor(event.color);
				
				if(event)
					
				dispatchEvent(new ActiveAreaEvent(ActiveAreaEvent.CHANGE_BACKGROUND_COLOR,null));
			}
			
			public function getBackgroundColor():uint
			{
				return cp.selectedColor;
			}
			
			public function setBackgroundColor(color:uint):void
			{
				cp.selectedColor = color;
				
				uibg.graphics.beginFill(cp.selectedColor);
				uibg.graphics.drawRect(0,0,2000,2000);
				uibg.graphics.endFill();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="select", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="unselect", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="updateAttribute", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="delete", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="unDelete", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="getLibraryFile", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="canSelectElement", type="tx.mnme.events.ActiveAreaEvent")]
		[Event(name="changeBackgroundColor", type="tx.mnme.events.ActiveAreaEvent")]
		
		[Event(name="addPointItem", type="tx.mnme.events.ActiveAreaEvent")]
	</fx:Metadata>
	<mx:ColorPicker id="cp" x="40" y="-18" width="16" height="16"
					change="colorpicker1_changeHandler(event)" selectedColor="#FFFFFF">
		
	</mx:ColorPicker>
	<s:Scroller id="scroller" left="0" right="0" top="0" bottom="0" horizontalScrollPolicy="on" verticalScrollPolicy="on">
		<s:Group left="0" right="0" top="0" bottom="0">
			<s:Group id="uibg" width="2000" height="2000"/>
			<s:Group id="uiframe" width="2000" height="2000" blendMode="difference"/>
			<mx:UIComponent id="ui" width="2000" height="2000" mouseDown="onUI(event)">
				
			</mx:UIComponent>
		</s:Group>
	</s:Scroller>
</panels:BasePanel>
